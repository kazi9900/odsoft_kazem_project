// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PC4MT.DAL.Context;

namespace PC4MT.DAL.Migrations
{
    [DbContext(typeof(PC4MTContext))]
    [Migration("20210114193623_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PC4MT.DAL.Data.Models.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("PC4MT.DAL.Data.Models.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("PC4MT.DAL.Data.Models.ConfigDownload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("MaxDownloadsPerUser")
                        .HasColumnType("int");

                    b.Property<int?>("MaxSentencesL1L2")
                        .HasColumnType("int");

                    b.Property<int?>("MaxSentencesPerDownload")
                        .HasColumnType("int");

                    b.Property<int?>("MaxSentencesPerUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ConfigDownloads");
                });

            modelBuilder.Entity("PC4MT.DAL.Data.Models.Download", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Downloads");
                });

            modelBuilder.Entity("PC4MT.DAL.Data.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("PC4MT.DAL.Data.Models.ProficiencyUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<byte>("LevelProficiency")
                        .HasColumnType("tinyint");

                    b.HasKey("UserId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("ProficiencyUsers");
                });

            modelBuilder.Entity("PC4MT.DAL.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateChange")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Language1Id")
                        .HasColumnType("int");

                    b.Property<int>("Language2Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("UserChangeId")
                        .HasColumnType("int");

                    b.Property<int?>("UserCreationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Language1Id");

                    b.HasIndex("Language2Id");

                    b.HasIndex("UserChangeId");

                    b.HasIndex("UserCreationId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("PC4MT.DAL.Data.Models.ProjectUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAutorized")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsprojectOwner")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectUsers");
                });

            modelBuilder.Entity("PC4MT.DAL.Data.Models.Sentence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("Canceled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateChange")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<int?>("UserChangeId")
                        .HasColumnType("int");

                    b.Property<int?>("UserCreationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserChangeId");

                    b.HasIndex("UserCreationId");

                    b.ToTable("Sentences");
                });

            modelBuilder.Entity("PC4MT.DAL.Data.Models.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateChange")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SentenceLanguage1Id")
                        .HasColumnType("int");

                    b.Property<int>("SentenceLanguage2Id")
                        .HasColumnType("int");

                    b.Property<int?>("UserChangeId")
                        .HasColumnType("int");

                    b.Property<int?>("UserCreationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SentenceLanguage1Id");

                    b.HasIndex("SentenceLanguage2Id");

                    b.HasIndex("UserChangeId");

                    b.HasIndex("UserCreationId");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("PC4MT.DAL.Data.Models.TranslationLike", b =>
                {
                    b.Property<int>("TranslationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool?>("Like")
                        .HasColumnType("bit");

                    b.HasKey("TranslationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TranslationLikes");
                });

            modelBuilder.Entity("PC4MT.DAL.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsToNotify")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("PC4MT.DAL.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("PC4MT.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("PC4MT.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("PC4MT.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PC4MT.DAL.Data.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("PC4MT.DAL.Data.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PC4MT.DAL.Data.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PC4MT.DAL.Data.Models.Download", b =>
                {
                    b.HasOne("PC4MT.DAL.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PC4MT.DAL.Data.Models.ProficiencyUser", b =>
                {
                    b.HasOne("PC4MT.DAL.Data.Models.Language", "Language")
                        .WithMany("LanguageProficiencyUser")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PC4MT.DAL.Data.Models.User", "User")
                        .WithMany("ProficiencyUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PC4MT.DAL.Data.Models.Project", b =>
                {
                    b.HasOne("PC4MT.DAL.Data.Models.Language", "Language1")
                        .WithMany()
                        .HasForeignKey("Language1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PC4MT.DAL.Data.Models.Language", "Language2")
                        .WithMany()
                        .HasForeignKey("Language2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PC4MT.DAL.Data.Models.User", "UserChange")
                        .WithMany("ProjectsUserChange")
                        .HasForeignKey("UserChangeId");

                    b.HasOne("PC4MT.DAL.Data.Models.User", "UserCreation")
                        .WithMany("ProjectsUserCreation")
                        .HasForeignKey("UserCreationId");
                });

            modelBuilder.Entity("PC4MT.DAL.Data.Models.ProjectUser", b =>
                {
                    b.HasOne("PC4MT.DAL.Data.Models.Project", "Project")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PC4MT.DAL.Data.Models.User", "User")
                        .WithMany("UserProjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PC4MT.DAL.Data.Models.Sentence", b =>
                {
                    b.HasOne("PC4MT.DAL.Data.Models.Language", "Language")
                        .WithMany("Sentences")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PC4MT.DAL.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("PC4MT.DAL.Data.Models.User", "UserChange")
                        .WithMany()
                        .HasForeignKey("UserChangeId");

                    b.HasOne("PC4MT.DAL.Data.Models.User", "UserCreation")
                        .WithMany()
                        .HasForeignKey("UserCreationId");
                });

            modelBuilder.Entity("PC4MT.DAL.Data.Models.Translation", b =>
                {
                    b.HasOne("PC4MT.DAL.Data.Models.Project", null)
                        .WithMany("Translations")
                        .HasForeignKey("ProjectId");

                    b.HasOne("PC4MT.DAL.Data.Models.Sentence", "SentenceLanguage1")
                        .WithMany("TranslationsSentenceLanguage1")
                        .HasForeignKey("SentenceLanguage1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PC4MT.DAL.Data.Models.Sentence", "SentenceLanguage2")
                        .WithMany("TranslationsSentenceLanguage2")
                        .HasForeignKey("SentenceLanguage2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PC4MT.DAL.Data.Models.User", "UserChange")
                        .WithMany()
                        .HasForeignKey("UserChangeId");

                    b.HasOne("PC4MT.DAL.Data.Models.User", "UserCreation")
                        .WithMany()
                        .HasForeignKey("UserCreationId");
                });

            modelBuilder.Entity("PC4MT.DAL.Data.Models.TranslationLike", b =>
                {
                    b.HasOne("PC4MT.DAL.Data.Models.Translation", "Translation")
                        .WithMany("TranslationLikes")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PC4MT.DAL.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
